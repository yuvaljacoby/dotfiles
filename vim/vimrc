" map leader to space
" let mapleader = "\<Space>"

call plug#begin('~/.vim/plugged')

Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'fatih/vim-go'
Plug 'vim-airline/vim-airline'
Plug 'scrooloose/nerdtree'
Plug 'chriskempson/base16-vim'
Plug 'rust-lang/rust.vim'
Plug 'machakann/vim-highlightedyank'
if has('nvim') 
    Plug 'autozimu/LanguageClient-neovim', {
                \ 'branch': 'next',
                \ 'do': 'bash install.sh' }
    Plug 'roxma/nvim-completion-manager'
    " Plug 'roxma/nvim-cm-racer'
    Plug 'Shougo/echodoc.vim'
else
    Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }
end

Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

Plug 'mileszs/ack.vim'
Plug 'stephpy/vim-yaml'

call plug#end()

filetype plugin indent on

set encoding=utf-8

set autoindent
set timeoutlen=300 " http://stackoverflow.com/questions/2158516/delay-before-o-opens-a-new-line
set nojoinspaces

" splits
set splitright
set splitbelow

" Search results centered please
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" fzf config
let g:fzf_layout = { 'down': '~20%' }
map <C-p> :Files<CR>
nmap <leader>; :Buffers<CR>

" dark background
set background=dark

" relative line numbers
set relativenumber
set number

" white space settings
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

set textwidth=80

" Wrapping options
set formatoptions=tc " wrap text and comments using textwidth
set formatoptions+=r " continue comments when pressing ENTER in I mode
set formatoptions+=q " enable formatting of comments with gq
set formatoptions+=n " detect lists for formatting
set formatoptions+=b " auto-wrap in insert mode, and do not wrap old long lines

set guifont=inconsolata:h12

" highlight search
set hlsearch

" 24bit colors
if has('termguicolors')
  set termguicolors
  silent! colorscheme base16-tomorrow-night
else
  let base16colorspace=256  " Access colors present in 256 colorspace
  colorscheme desert
end

if has('nvim') 
    " preview substitutions
    set inccommand=nosplit
end

" git grep command
nnoremap <C-F> :Ggr <cword><CR>
command -nargs=+ Ggr execute 'silent Ggrep!' <q-args> | cw | redraw!

set colorcolumn=80

" Ctrl+j as Esc
vnoremap <C-j> <Esc>
inoremap <C-j> <Esc>
nnoremap <C-j> <Esc>

" search work under the cursor using 
let g:ackprg = 'ag --vimgrep'
nmap <C-k>    mo:Ack! "\b<cword>\b" <CR>

set visualbell

" color scheme
" silent! colorscheme base16-tomorrow-night

" highlight yank
let g:highlightedyank_highlight_duration = 300

" language server protocol
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ 'python': ['pyls'],
    \ }
let g:LanguageClient_autoStart = 1

nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>

" language specific
" rust
let g:rustfmt_autosave = 1
let g:rustfmt_fail_silently = 1
au Filetype rust set colorcolumn=100

" vim-go config
let g:go_fmt_command = "goimports"

" enforce purity
nnoremap <up> <nop>
nnoremap <down> <nop>

" Left and right can switch buffers
nnoremap <left> :bp<CR>
nnoremap <right> :bn<CR>

set spell

let g:airline_powerline_fonts = 1
